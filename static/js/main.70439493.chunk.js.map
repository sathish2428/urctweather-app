{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","className","Form","onSubmit","getWeather","class","type","placeholder","name","id","required","autocomplete","for","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","API_CALL","json","response","console","log","cod","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.70439493.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Titles = (props) => {\n        return(\n               <div>\n               <h1 className=\"title-container__title text-center\">Weather Application</h1>\n               <h3 className=\"title-container__subtitle text-center\">Check Weather in your city</h3>\n               </div>\n        );\n}","import React from \"react\";\n\nexport const Form = (props) => {\n        return(\n                <form onSubmit={props.getWeather}>\n                    <div class=\"form__group field\">\n                    <input type=\"input\" class=\"form__field\" placeholder=\"City\" name=\"city\" id='city' required autocomplete=\"off\"/>\n                    <label for=\"city\" class=\"form__label\">City</label>\n                    </div>\n\n                    <div class=\"form__group field\">\n                    <input type=\"input\" class=\"form__field\" placeholder=\"Country\" name=\"country\" id='country' required autocomplete=\"off\"/>\n                    <label for=\"country\" class=\"form__label\">Country</label>\n                    </div>\n                   <button id=\"btn-hide\">\n                    <div type=\"submit\" class=\"hexagon-wrapper\">\n                        <div class=\"hexagon\">\n                            <i class=\"fa fa-sun-o\"></i>\n                        </div>\n                    </div> \n                   </button>\n\n                   {/* <button>Get Weather</button> */}\n                </form>\n        );\n}","import React,{Fragment} from \"react\";\n\nexport const Weather = (props) => {\n    return(\n        <Fragment>\n            <div className=\"weather__info\">\n                {props.city && props.country && <p className=\"weather__key\">Location: \n                    <span className=\"weather__value\">{props.city}, {props.country}</span>\n                </p>}\n                {props.temperature && <p className=\"weather__key\">Temperature: \n                    <span className=\"weather__value\">{props.temperature}</span>\n                </p> }\n                {props.humidity && <p className=\"weather__key\">Humidity: \n                    <span className=\"weather__value\">{props.humidity}</span>\n                </p>}\n                {props.description && <p className=\"weather__key\">Description:  \n                    <span className=\"weather__value\">{props.description}</span>\n                </p>}\n                {props.error && <p className=\"weather__error\">{props.error}</p>}\n            </div>\n        </Fragment>\n    );\n}","import React, {Fragment} from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\"\nimport {Titles} from \"./components/Titles\";\nimport {Form} from \"./components/Form\";\nimport {Weather} from \"./components/Weather\";\n\n\nconst API_KEY = \"ecf4d3268a678c474152f3fb2ef5f933\";\n\nexport class App extends React.Component{\n  \n  state = {\n    temperature : undefined,\n    city : undefined,\n    country: undefined,\n    humidity : undefined,\n    description: undefined,\n    error : undefined\n  }\n  getWeather = async (e) =>{\n    e.preventDefault();\n    const city =e.target.elements.city.value;\n    const country =e.target.elements.country.value;\n    if(city ){\n    const API_CALL =  await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n    const response = await API_CALL.json();\n    \n    console.log(response)\n    if(response.cod === \"404\"){\n      this.setState({\n        temperature : undefined,\n        city :undefined,\n        country : undefined,\n        humidity : undefined,\n        description : undefined,\n        error : \"City You Entered Is Not Found\"\n      })\n    }else{\n    this.setState({\n      temperature : response.main.temp,\n      city : response.name,\n      country : response.sys.country,\n      humidity : response.main.humidity,\n      description : response.weather[0].description,\n      error : \"\"\n    })\n  }\n  }else{\n    this.setState({\n      temperature : undefined,\n      city :undefined,\n      country : undefined,\n      humidity : undefined,\n      description : undefined,\n      error : \"Please enter Values in the input Box\"\n    })\n  }\n}\n  render(){\n    return (\n    <Fragment>\n     <div className=\"container-fluid h-100 bg-autumn\">\n       <div className=\"row justify-content-center align-items-center h-100\">\n        <div className=\"container mt-5 h-75 \">\n          <div className=\"row h-100 justify-content-center align-content-center bg-overlay\">\n            <div className=\"col-md-4 h-100 bg-left align-items-center justify-content-center d-flex\">\n            <Titles/>\n            </div>\n            <div className=\"col-md-8 h-100 bg-right \">\n                <Form getWeather={this.getWeather} />\n                  <Weather \n                  temperature={this.state.temperature} \n                  city={this.state.city} \n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n            </div>\n          </div>\n        </div>\n       </div>\n     </div>\n\n\n     \n          <div className=\"col-6 h-100 justify-content-center\">\n             \n           \n                \n             \n             \n          </div>\n          \n\n\n      {/* <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container h-100 \">\n            <div className=\"row justify-content-center h-100\">\n              <div className=\"col-xs-5 hidden-md-down title-container\">\n               \n              </div>\n              <div className=\"col-10 col-sm-10 col-md-10 col-lg-8 col-xl-8 form-container\">\n               \n              </div>\n            </div>\n          </div>\n        </div>\n      </div> */}\n    </Fragment>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}